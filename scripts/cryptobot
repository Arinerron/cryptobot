#!/usr/bin/env python3

import shutil
import os
import sys
import time
import datetime
import argparse
import traceback


# make /usr/share/cryptobot before importing it so it can create the sqlite db
try:
    os.makedirs('/usr/share/cryptobot')

    if os.geteuid() != 0:
        raise PermissionError('You must be root to run this script')
except PermissionError as e:
    print('Permission denied. Are you root?')
    raise e
except FileExistsError:
    pass

try:
    import cryptobot
    from cryptobot import logger, database, config
    from cryptobot.analysis import format_seconds
except ModuleNotFoundError as e:
    print('Cannot import cryptobot module, is the bot installed properly?')
    raise e


def getStats() -> list:
    stats = list()
    product_id = config.get('bot.coin') + '-USD'

    c = database.database()

    # coin type
    stats += [('Product ID', product_id)]

    # TODO: more order related things, like # buy/sells, total trade volume, current market trend, etc

    # portfolio balance
    balance = cryptobot.analysis.txn.get_balance()
    stats += [('Portfolio balance', ' :: '.join(['%.4f %s' % (float(deets['balance']), coin) for coin, deets in balance.items()]))]

    # number of orders
    r = c.execute('SELECT COUNT(*) AS numb FROM `orders` WHERE `product_id`=?', (product_id,))
    row = r.fetchone()
    numb = 0
    if row:
        numb = int(row[0])
    stats += [('Total number of orders', numb)]

    # number of analysis jobs run
    r = c.execute('SELECT COUNT(*) AS numb FROM `movement_score_history` WHERE `product_id`=?', (product_id,))
    row = r.fetchone()
    numb = 0
    if row:
        numb = int(row[0])
    stats += [('Total number of analysis jobs run', numb)]

    # number of cached price history datapoints
    r = c.execute('SELECT COUNT(*) AS numb FROM `price_history` WHERE `product_id`=?', (product_id,))
    row = r.fetchone()
    numb = 0
    if row:
        numb = int(row[0])
    stats += [('Total number of price history datapoints', numb)]

    c.close()
    return stats

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser()
        subparsers = parser.add_subparsers(dest='subparser')

        parser_status = subparsers.add_parser('status')
        parser_analyze_market = subparsers.add_parser('analyze-market')
        parser_analyze_market = subparsers.add_parser('check-price')

        args = parser.parse_args()

        logger.debug('$ ' + ' '.join([("'%s'" % x if ' ' in x else x) for x in sys.argv]))
        if args.subparser == 'status':
            logger.info('Performing cryptobot status check...')

            if not os.path.isfile('/usr/share/cryptobot/history.db'):
                logger.warning('The history database does not exist yet. Have you run an analysis yet?')
                exit(0)

            # find the last_movement_score from the database
            c = database.database()
            r = c.execute('SELECT datetime(`ts`, \'localtime\'), `score` FROM `movement_score_history` WHERE `product_id`=? ORDER BY id DESC LIMIT 1', (config.get('bot.coin') + '-USD',))
            row = r.fetchone()
            c.close()

            # if there was result (i.e. this is not the first run)
            if row:
                ts, last_movement_score = row
                ts = datetime.datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').timestamp()
                time_since_last_run = time.time() - ts

                time_buffer = 60 * 5 # how many seconds off is acceptable
                analysis_runs_every = 60 * 60 # how many seconds between each run. DO NOT CHANGE THIS!

                # ensure the last movement score is valid
                if time_since_last_run < analysis_runs_every - time_buffer:
                    # nope! it's already run, so we don't need to / shouldn't run it again
                    logger.info('Analysis ran %s ago which is within the past hour (ts=%d, last_score=%.6f).' % (format_seconds(time_since_last_run), ts, last_movement_score))
                    logger.debug('The analysis job should run again in %s, assuming all is well.' % (format_seconds(analysis_runs_every - time_since_last_run)))
                elif time_since_last_run > (2 * analysis_runs_every) + time_buffer:
                    # nope! the change score is too old
                    # otherwise we could misinterpret the movement change score
                    logger.warning('Analysis ran %s ago which is not run last hour.' % format_seconds(time_since_last_run))
                else:
                    logger.info('Analysis ran %s ago which is not within the last hour, but the score is not stale (cur_ts=%d, ts=%d, last_score=%.6f).' % (format_seconds(time_since_last_run), time.time(), ts, last_movement_score))
            else:
                logger.warning('Analysis has never been performed; history.db is empty.')
                exit()

            logger.info('-'*80)
            logger.info('[ Statistics ]')
            for stat in getStats():
                name, numb = stat
                logger.info('... %s: %s' % (name, str(numb)))
        elif args.subparser == 'analyze-market':
            logger.info('Performing market analysis as of %s (%d)...' % (str(datetime.datetime.now()), time.time()))
            cryptobot.analysis.analyze_market()
            logger.info('Done performing analysis. Run this command again in an hour or so.')
        elif args.subparser == 'check-price':
            logger.info('Checking the coin\'s current price (as of %d) and storing in the database...' % time.time())
            # NOTE: dont use cache; it doesn't track which coin it's caching
            # XXX/HACK: this is pretty hacky
            if config.get('bot.coin') not in ['BTC', 'ETH']:
                coin_price = cryptobot.analysis.history.get_current_price(use_cache=False, commit=False)
                logger.info('Current configured coin price is %.2f USD / coin.' % coin_price)
            btc_price = cryptobot.analysis.history.get_current_price(use_cache=False, product_id_override='BTC-USD', commit=False)
            logger.info('Current BTC-USD price is %.2f USD / BTC.' % btc_price)
            eth_price = cryptobot.analysis.history.get_current_price(use_cache=False, product_id_override='ETH-USD')
            logger.info('Current ETH-USD price is %.2f USD / ETH.' % eth_price)
            # NOTE: the coin cache is corrupted at this point, don't do more logic!
    except Exception as e:
        logger.critical('Exception raised:\n' + ''.join(traceback.TracebackException.from_exception(e).format()))
        raise e
